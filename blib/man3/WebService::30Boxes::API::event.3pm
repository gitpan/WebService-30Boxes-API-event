.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WebService::30Boxes::API::event 3pm"
.TH WebService::30Boxes::API::event 3pm "2007-07-15" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
WebService::30Boxes::API::event \- Perl accessor interface for the hash returned by WebService::30Boxes::API::call("events.Get)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
#$api_key and \f(CW$auth_token\fR are defined before
my \f(CW$boxes\fR = WebService::30Boxes::API\->new(api_key => \f(CW$api_key\fR);
.PP
my \f(CW$result\fR = \f(CW$boxes\fR\->call('events.Get', {authorizedUserToken => \f(CW$auth_token\fR});
if($result\->{'success'}){
	my \f(CW$events\fR = WebService::30Boxes::API::event\->new($result);
.PP
.Vb 3
\&        print "List start: " . $events\->get_listStart . "\en";
\&        print "List end: " . $events\->get_listEnd . "\en";
\&        print "User Id: " . $events\->get_userId . "\en\en\en";
.Ve
.PP
.Vb 25
\&        foreach ($events\->get_eventIds){
\&                print "Event id: $_\en";
\&                print "Title: " . $events\->get_title($_) . "\en";
\&                print "Repeat end date: " . $events\->get_repeatEndDate($_) . "\en";
\&                print "Repeat skip dates: ";
\&                foreach ($events\->get_repeatSkipDates($_)){print "$_\en";}
\&                print "Repeat type: " . $events\->get_repeatType($_) . "\en";
\&                print "Repeat interval: " . $events\->get_repeatInterval($_) . "\en";
\&                print "Reminder: " . $events\->get_reminder($_) . "\en";
\&                print "Tags: ";
\&                foreach ($events\->get_tags($_)){print "$_\en";}
\&                print "Start date: " . $events\->get_startDate($_) . "\en";
\&                print "Start time: " . $events\->get_startTime($_) . "\en";
\&                print "End date: " . $events\->get_endDate($_) . "\en";
\&                print "End time: " . $events\->get_endTime($_) . "\en";
\&                print "Is all day event: " . $events\->get_isAllDayEvent($_) . "\en";
\&                print "Notes: ";
\&                foreach ($events\->get_notes($_)){print "$_\en";}
\&                print "Privacy: " . $events\->get_privacy($_) . "\en\en";
\&        }
\&}
\&else{
\&        print "An error occured (" . $result\->{'error_code'} . ": " .
\&                $result\->{'error_msg'} . ")\en";
\&}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is provided for convenience
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
The following methods can be used
.PP
\fInew\fR
.IX Subsection "new"
.PP
Create a new \f(CW\*(C`WebService::30Boxes::API::event\*(C'\fR object.
.IP "result" 5
.IX Item "result"
(\fBMandatory\fR) Result must be the return value of the call('events.Get') function.
.PP
\fIget_eventIds\fR
.IX Subsection "get_eventIds"
.PP
Returns an array of event ids.
.PP
You can then use this to call any of the following functions.
.PP
\fIget_listEnd\fR
.IX Subsection "get_listEnd"
.PP
Returns the end date of the list of events \- yyyy\-mm\-dd.
.PP
\fIget_listStart\fR
.IX Subsection "get_listStart"
.PP
Returns the start date of the list of events \- yyyy\-mm\-dd.
.PP
\fIget_userId\fR
.IX Subsection "get_userId"
.PP
Returns the current user id.
.PP
\fIget_repeatEndDate\fR
.IX Subsection "get_repeatEndDate"
.PP
Return the date when the recurring event stops repeating \- yyyy\-mm\-dd. 
Returns 0000\-00\-00 if none. 
If an event spans over multiple days but it is not recurring, the final date will be returned. 
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_repeatSkipDates\fR
.IX Subsection "get_repeatSkipDates"
.PP
Returns a list of the days that are skipped.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information
.PP
\fIget_repeatType\fR
.IX Subsection "get_repeatType"
.PP
Returns the repeat type for the event. 
Returns 'no' if none.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_repeatInterval\fR
.IX Subsection "get_repeatInterval"
.PP
Returns the repeat interval for the event. 
This together with get_repeatType tell you all you need to know about how the event repeats. 
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_reminder\fR
.IX Subsection "get_reminder"
.PP
Returns the number of minutes before the event when the reminder will be sent. 
Returns \-1 if no reminder.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_tags\fR
.IX Subsection "get_tags"
.PP
Returns a list of tags.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_startDate\fR
.IX Subsection "get_startDate"
.PP
Returns the start date for the event \- yyyy\-mm\-dd.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_startTime\fR
.IX Subsection "get_startTime"
.PP
Returns the start time for the event \- hh:mm:ss.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_endDate\fR
.IX Subsection "get_endDate"
.PP
Returns the end date for the event \- yyyy\-mm\-dd.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_endTime\fR
.IX Subsection "get_endTime"
.PP
Returns the end time for the event \- hh:mm:ss.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_isAllDayEvent\fR
.IX Subsection "get_isAllDayEvent"
.PP
Returns 1 if it is an all day event, 0 otherwise.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_title\fR
.IX Subsection "get_title"
.PP
Returns the title for the event. 
Returns 1 if it is an all day event, 0 otherwise.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_notes\fR
.IX Subsection "get_notes"
.PP
Return the notes for the event in the form of a string. 
If the notes span over multiple lines, the order in which they are returned is undefined.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.PP
\fIget_privacy\fR
.IX Subsection "get_privacy"
.PP
Returns whether the event is shared or private. 
Return value is a string.
.PP
Arguments:
.IP "eventId" 5
.IX Item "eventId"
(\fBMandatory\fR) The eventId of the event for which you want to retreive the information.
.SH "TODO"
.IX Header "TODO"
.SH "BUGS"
.IX Header "BUGS"
If the notes field for an event contains more than one line, the order of the lines in the returned string is undefined. This is because of the way XML::Simple parses the data returned by the 30Boxes \s-1API\s0. There is nothing I can do about this.
.PP
Please notify chitoiup@umich.edu of any bugs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://30boxes.com/>, <http://30boxes.com/api/>
.PP
WebService::30Boxes::API
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Chitoiu, <chitoiup@umich.edu<gt>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2007 by Robert Chitoiu
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
